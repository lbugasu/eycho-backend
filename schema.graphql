# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthOutput {
  library: Library!
  playingQueue: PlayingQueue!
  preferences: UserPreference!
  user: User!
}

type Author {
  _id: ID!
  email: String
  name: String
  slug: String
}

type Category {
  _id: ID!
  comments: [Comment!]!
  contributor: User!
  coverImageUrl: String
  episodes: [Episode!]!
  featured: Boolean
  podcasts: [Podcast!]!
  slug: String!
  title: String!
  visible: Boolean
}

"""A collection contains a list of podcasts grouped by a user"""
type Collection {
  _id: ID!
  coverImageUrl: String
  description: String
  name: String!
  podcasts: [Podcast!]!
  public: Boolean
  themeColor: String
}

input CollectionInput {
  coverImageUrl: String
  description: String
  name: String!
  themeColor: String
}

type Comment {
  _id: ID!
  categories: Category!
  content: String!
  likes: [User!]!
  podcast: Podcast!
  userId: User!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Entity {
  _id: ID!
  episodes: [Episode!]!
  featured: Boolean
  name: String!
  podcasts: [Podcast!]!
  type: String!
}

type Episode {
  _id: ID!
  author: Author
  categories: [Category!]
  comments: [Comment!]
  description: String
  duration: String
  entities: [Entity!]!
  epNo: String
  explicit: Boolean
  htmlDescription: String
  image: String
  likes: [User!]
  link: String
  mime: String
  plays: Play
  podcast: Podcast
  published: DateTime
  slug: String
  snNo: String
  sourceUrl: String
  subtitle: String
  summary: String
  title: String
}

type Library {
  _id: ID!

  """
  The Podcast Episodes that a user has archived - listened to or manually archived
  """
  archivedEpisodes: [Episode!]!

  """A user's bookmarked episodes"""
  bookmarkedEpisodes: [Episode!]!

  """A user' collections"""
  collections: [Collection!]!

  """The categories that a user is following."""
  followedCategories: [Category!]!

  """The episodes that a user has liked"""
  likedEpisodes: [Episode!]!

  """The episodes that a user adds to listen later list"""
  listenLater: [Episode!]!

  """A user' playlists"""
  playlists: [Playlist!]!

  """
  User's podcasts "on Tap"
  """
  podsOnTap: [Podcast!]!

  """The podcasts that the user has subscribed to."""
  subscribedPodcasts: [Podcast!]!
}

type Links {
  download: String
  download_location: String
  html: String
  self: String
}

type Mutation {
  addEpisodeToPlaylist(episodeSlug: String!, playlistId: String!): Playlist!
  addPodcastToCollection(collectionId: String!, podcastSlug: String!): Collection!

  """Adds an episode to a player's queue"""
  addToBeginningOfQueue(slug: String!): PlayingQueue!

  """Adds an episode to a player's queue"""
  addToEndOfQueue(slug: String!): PlayingQueue!
  addToListenLater(slug: String!): Library!
  addToOnTap(slug: String!): Library!
  archiveEpisode(slug: String!): Library!
  bookmarkEpisode(slug: String!): Library!

  """Changes a user's playing playbackSpeed."""
  changePlayingSpeed(playbackSpeed: Float!): UserPreference!

  """Deletes/Clears a user's playing queue"""
  clearQueue: PlayingQueue!

  """completes the currently playing item and loads the current queue"""
  completeAndGoToNext(playId: String!): PlayingQueue!
  createCollection(collection: CollectionInput!): Library!
  createPlaylist(playlist: PlaylistInput!): Library!
  deleteCollection(collectionId: String!): Library!
  deletePlaylist(playlistId: String!): Library!
  editCategoryFeatureness(categoryId: String!, featured: Boolean!): Category!
  editCollection(collection: CollectionInput!, collectionId: String!): Collection!
  editPlaylist(playlist: PlaylistInput!, playlistId: String!): Playlist!

  """Retreives a user's library"""
  getLibrary: Library!
  getSubscribedPodcastEpisodeQueue: Library!

  """Goes to the next play. Current play is placed at the end of the queue"""
  goToNextPlay: PlayingQueue!
  likeEpisode(slug: String!): Library!

  """
  Play a playlist. Clear entire queue and add episodes in playlist onto queue
  """
  playFromPlaylist(endOfQueue: Boolean!, playlistId: String!, upNext: Boolean!): PlayingQueue!

  """Plays episodes from the user's liked episodes"""
  playLikedEpisodes(endOfQueue: Boolean!, upNext: Boolean!): PlayingQueue!

  """Plays episodes from the user's listen later list."""
  playListenLater(endOfQueue: Boolean!, upNext: Boolean!): PlayingQueue!
  removeEpisodeFromPlaylist(episodeSlug: String!, playlistId: String!): Playlist!
  removeFromListenLater(slug: String!): Library!
  removeFromOnTap(slug: String!): Library!

  """Removes a play at a particular position in the queue"""
  removePlayAtIndex(index: Float!): PlayingQueue!
  removePodcastFromCollection(collectionId: String!, podcastSlug: String!): Collection!

  """Rearrange items in the player's queue"""
  reorderQueue(from: Float!, to: Float!): PlayingQueue!

  """Sets whether or not to skip ads in an episode."""
  setSkipAds(skipAds: Boolean!): UserPreference!

  """Sets whether or not to trim silence for an podcast episode"""
  setTrimSilence(trimSilence: Boolean!): UserPreference!

  """Sets a user Volume."""
  setUserVolume(volume: Float!): UserPreference!
  signUpOrIn: AuthOutput!

  """Starts the playing of a Play object"""
  startPlay(slug: String!): PlayingQueue!
  subscribeToPodcast(slug: String!): Library!
  unArchiveEpisode(slug: String!): Library!
  unSubscribeToPodcast(slug: String!): Library!
  unbookmarkEpisode(slug: String!): Library!
  unlikeEpisode(slug: String!): Library!

  """Updates the play position of a Play object"""
  updatePlayPosition(playId: Float!, position: Float!): Play!

  """Updates the position of a user's Play object"""
  updatePosition(playId: String!, position: Float!): Play!
}

type Play {
  _id: ID!
  completed: Boolean
  episode: Episode!
  position: Float!
  started: Boolean!
  user: User
}

type PlayingQueue {
  _id: ID!
  playHistory: [Play!]!
  plays: [Play!]!
}

"""A playlist contains a list of episodes added by a user."""
type Playlist {
  _id: ID!
  coverImageUrl: String
  description: String
  episodes: [Episode!]!
  name: String!
  public: Boolean
  themeColor: String
}

input PlaylistInput {
  coverImageUrl: String
  description: String
  name: String!
  themeColor: String
}

type Podcast {
  _id: ID!
  author: Author
  base64image: String
  categories: [Category!]
  description: String
  entities: [Entity!]
  episodes: [Episode!]
  featured: Boolean
  frequency: Float
  image: String
  lastEpisodeDate: DateTime
  lastUpdated: DateTime
  link: String
  palette: [String!]
  publisher: String
  releaseDay: Float
  rssFeed: String
  slug: String!
  title: String!
}

type Query {
  """Returns a list of all the genres"""
  getCategories(page: Float!): [Category!]!
  getCategorySearchRecommendations: [Category!]!

  """Retreives a collection by id"""
  getCollection(collectionId: String!): Collection!
  getComment: Comment

  """Returns a list of recommended topics"""
  getEntitySearchRecommendations: [Entity!]!
  getEpisodesForPodcastsInCollection(collectionId: String!, page: Float!): [Episode!]!
  getEpisodesForSubscribedPodcasts(page: Float!): [Episode!]!

  """Returns the featured podcasts"""
  getFeatured: [Podcast!]!
  getFeaturedCategories: [Category!]!
  getFullCategory(categoryId: String!): Category!

  """Gets the subscription status of podcasts. Returns 30 at a time."""
  getHubSubscriptionStatus(page: Float!): [SubscriptionStatus!]!

  """Retreives a playlist by id"""
  getPlaylist(playlistId: String!): Playlist!

  """Find a podcast based on it's slug"""
  getPodcast(slug: String!): Podcast!

  """Returns a podcasts'episodes. 20 podcast episodes at a time."""
  getPodcastEpisodes(page: Float!, slug: String!): [Episode!]!

  """Get podcasts ~ 50 podcasts at a time."""
  getPodcasts(page: Float!): [Podcast!]!

  """Returns the Most Played Podcasts"""
  getTopPlayed: [Podcast!]!

  """Returns the Trending Podcasts"""
  getTrending: [Podcast!]!

  """Gets a user' preferences."""
  getUserPreferences: UserPreference!

  """Returns a user's player queue"""
  getUserQueue: PlayingQueue!
  print: String!

  """
  Searches for entities based on a search string. Returns 10 entities at a time
          As well as the first 5 podcasts and episodes that contain the entities.
  """
  searchEntities(entityType: String, searchString: String!): [Entity!]!

  """
  Searches for podcasts episodes based on a search string and entity. 
              For instance, Searching for podcasts that mention "Jollof" will return podcast episodes that mention that entityName
              Returns 10 podcast episodes at a time.
  """
  searchEpisodeByEntity(entityName: String!, entityType: String): [Episode!]!

  """
  Find episodes based on a search string. Searches can be restricted to title, description, or both.
  """
  searchEpisodes(searchInput: SearchInput!): [Episode!]!

  """Search a photo on unsplash"""
  searchForCoverPhoto(searchTerm: String!): [UnsplashPhoto!]!

  """
  Searches for podcasts based on a search string and entity. 
              For instance, Searching for podcasts that mention "Obama" will return podcasts that mention that entityName
              Returns 10 podcasts at a time.
  """
  searchPodcastByEntity(entityName: String!, entityType: String): [Podcast!]!

  """
  Searches for podcasts based on a search string. Returns 10 podcasts at a time.
          Searches can be specified to be in the title or description or both.
  """
  searchPodcasts(searchInput: SearchInput!): [Podcast!]!

  """Returns the Most Popular Podcast Episodes"""
  topEpisodes: [Episode!]!
}

input SearchInput {
  categorySlugs: [String!]!
  inDescription: Boolean!
  inTitle: Boolean!
  page: Float!
  searchString: String!
}

type SubscriptionStatus {
  _id: ID!
  aggregateStatistics: String!
  callbackUrl: String!
  expirationTime: String!
  lastDeliveryError: String!
  lastSubscribeRequest: String!
  lastSuccessfulVerification: String!
  lastUnsubscribeRequest: String!
  lastVerificationError: String!
  podcast: Podcast!
  state: String!
}

type URLS {
  full: String
  raq: String
  regular: String
  small: String
  thumb: String
}

"""
UI Mode - Either '"Light" or "Dark"
"""
enum UiMode {
  Dark
  Light
}

type UnsplashPhoto {
  alt_description: String
  blur_hash: String
  categories: [String!]
  color: String
  description: String
  height: Float
  likes: Float
  links: Links
  promoted_at: String
  urls: URLS
  user: UnsplashUser
  width: Float
}

type UnsplashUser {
  bio: String
  first_name: String
  id: String
  instagram_username: String
  last_name: String
  location: String
  name: String
  portfolio_url: String
  twitter_username: String
  updated_at: String
  username: String
}

type User {
  _id: ID!
  active: Boolean!
  admin: Boolean!
  contributions: [String!]!
  deviceId: String
  email: String
  library: Library!
  name: String
  permissions: [UserPermission!]!
  playingQueue: PlayingQueue!
  plays: [Play!]!
  preferences: UserPreference!
  uid: String
}

"""User Permissions"""
enum UserPermission {
  Admin
  Editor
  Registered_User
  User
}

type UserPreference {
  _id: ID!
  playbackSpeed: Float!
  skipAds: Boolean!
  trimSilence: Boolean!
  uiMode: UiMode!
  volume: Float!
}
